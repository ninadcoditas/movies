{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-f159fa261b0dd04c0281d71e5c841fb5",
            "file": "src/app/app.state.ts",
            "type": "interface",
            "sourceCode": "import { Movie } from './model/Movie'\r\nexport interface AppState {\r\n    readonly movie: Movie[],\r\n    readonly auth\r\n}",
            "properties": [
                {
                    "name": "auth",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "movie",
                    "type": "Movie[]",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Theme",
            "id": "interface-Theme-c65a875fb9a2d3ffa4bc402c1660c37a",
            "file": "src/app/theme/theme.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\r\n    name: string;\r\n    properties: any;\r\n}\r\n\r\nexport const light: Theme = {\r\n    name: \"light\",\r\n    properties: {\r\n        \"--foreground-default\": \"#08090A\",\r\n        \"--foreground-secondary\": \"#41474D\",\r\n        \"--foreground-tertiary\": \"#797C80\",\r\n        \"--foreground-quaternary\": \"#F4FAFF\",\r\n        \"--foreground-light\": \"#41474D\",\r\n\r\n        \"--background-default\": \"#F4FAFF\",\r\n        \"--background-secondary\": \"#A3B9CC\",\r\n        \"--background-tertiary\": \"#5C7D99\",\r\n        \"--background-light\": \"#FFFFFF\",\r\n\r\n        \"--primary-default\": \"#5DFDCB\",\r\n        \"--primary-dark\": \"#24B286\",\r\n        \"--primary-light\": \"#B2FFE7\",\r\n\r\n        \"--error-default\": \"#EF3E36\",\r\n        \"--error-dark\": \"#800600\",\r\n        \"--error-light\": \"#FFCECC\",\r\n        \"--background-tertiary-shadow\": \"0 1px 3px 0 rgba(92, 125, 153, 0.5)\",\r\n\r\n\r\n        \"--text-color\": \"black\",\r\n        \"--body-background\": \"#FFFFFF\",\r\n        \"--signup\": \"#3277B3\",\r\n        \"--list-background\": \"#E2E4E9\",\r\n        \"--card-background\": \"#FFFFFF\",\r\n        \"--theme\": \"#3277B3\"\r\n    }\r\n};\r\n\r\nexport const dark: Theme = {\r\n    name: \"dark\",\r\n    properties: {\r\n        \"--foreground-default\": \"#5C7D99\",\r\n        \"--foreground-secondary\": \"#A3B9CC\",\r\n        \"--foreground-tertiary\": \"#F4FAFF\",\r\n        \"--foreground-quaternary\": \"#E5E5E5\",\r\n        \"--foreground-light\": \"#FFFFFF\",\r\n\r\n        \"--background-default\": \"#797C80\",\r\n        \"--background-secondary\": \"#41474D\",\r\n        \"--background-tertiary\": \"#08090A\",\r\n        \"--background-light\": \"#41474D\",\r\n\r\n        \"--primary-default\": \"#5DFDCB\",\r\n        \"--primary-dark\": \"#24B286\",\r\n        \"--primary-light\": \"#B2FFE7\",\r\n\r\n        \"--error-default\": \"#EF3E36\",\r\n        \"--error-dark\": \"#800600\",\r\n        \"--error-light\": \"#FFCECC\",\r\n\r\n        \"--background-tertiary-shadow\": \"0 1px 3px 0 rgba(8, 9, 10, 0.5)\",\r\n\r\n\r\n        \"--text-color\": \"white\",\r\n        \"--body-background\": \"#262626\",\r\n        \"--signup\": \"#3277B3\",\r\n        \"--list-background\": \"#363C49\",\r\n        \"--card-background\": \"#262626\"\r\n    }\r\n};",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-394b9c748fbfdbfcf1daba7f995609ae",
            "file": "src/app/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "loadUsers$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AuthActions.LOAD_USERS),\r\n        mergeMap(\r\n            action => this.dataService.getUsers().pipe(\r\n                map(users => (new AuthActions.Load_Users_Success(users))),\r\n\r\n            )\r\n        )\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "signUp$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<ActionType>(AuthActions.SIGNUP),\r\n        mergeMap(\r\n            action => this.dataService.signUp(action.payload).pipe(\r\n                map(users => (new AuthActions.Signup_Success(users))),\r\n            )\r\n        )\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Actions, Effect, ofType, createEffect } from '@ngrx/effects';\r\n\r\nimport { map, switchMap, mergeMap } from 'rxjs/operators'\r\n\r\nimport { ActionType } from '../model/Action'\r\n\r\nimport * as AuthActions from '../actions/auth.actions';\r\nimport { DataService } from '../services/data.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private dataService: DataService\r\n    ) { }\r\n\r\n    @Effect()\r\n    loadUsers$ = this.actions$.pipe(\r\n        ofType(AuthActions.LOAD_USERS),\r\n        mergeMap(\r\n            action => this.dataService.getUsers().pipe(\r\n                map(users => (new AuthActions.Load_Users_Success(users))),\r\n\r\n            )\r\n        )\r\n    )\r\n\r\n    @Effect()\r\n    signUp$ = this.actions$.pipe(\r\n        ofType<ActionType>(AuthActions.SIGNUP),\r\n        mergeMap(\r\n            action => this.dataService.signUp(action.payload).pipe(\r\n                map(users => (new AuthActions.Signup_Success(users))),\r\n            )\r\n        )\r\n    )\r\n\r\n}\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "dataService",
                        "type": "DataService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-ce4dd3ab81b14e73b684a571a5d8edc7",
            "file": "src/app/services/data.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "\"http://localhost:3000\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "addMovie",
                    "args": [
                        {
                            "name": "data",
                            "type": "Movie"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Movie",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMovie",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "data",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMovie",
                    "args": [
                        {
                            "name": "data",
                            "type": "Movie"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Movie",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Movie } from '../model/Movie';\r\nimport { User } from '../model/User'\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  url = \"http://localhost:3000\"\r\n\r\n  getMovies() {\r\n    // console.log(this.url)\r\n    return this.http.get(`${this.url}/movies`)\r\n  }\r\n\r\n  updateMovie(data: Movie) {\r\n    // console.log(data)\r\n    return this.http.put(`${this.url}/movies/${data.id}`, data)\r\n  }\r\n\r\n  deleteMovie(id: number) {\r\n    return this.http.delete(`${this.url}/movies/${id}`)\r\n  }\r\n\r\n  addMovie(data: Movie) {\r\n    return this.http.post(`${this.url}/movies`, data)\r\n  }\r\n\r\n  getUsers() {\r\n    return this.http.get(`${this.url}/users`)\r\n  }\r\n\r\n  signUp(data: User) {\r\n    // debugger;\r\n    return this.http.post(`${this.url}/users`, data)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MovieEffects",
            "id": "injectable-MovieEffects-79f104ba077125fe54bac9b7cde4ad9c",
            "file": "src/app/effects/movie.effects.ts",
            "properties": [
                {
                    "name": "addMovie$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<ActionType>(MovieActions.ADD_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.addMovie(action.payload).pipe(\r\n                map(users => (new MovieActions.AddMovieSuccess(action.payload))),\r\n            )\r\n        )\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteMovie$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<ActionType>(MovieActions.DELETE_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.deleteMovie(action.payload).pipe(\r\n                map(users => (new MovieActions.DeleteMovieSuccess(action.payload))),\r\n            )\r\n        )\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadMovie$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(MovieActions.LOAD_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.getMovies().pipe(\r\n                map(movies => (new MovieActions.LoadMovieSucess(movies)))\r\n            )\r\n        )\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateMovie$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<ActionType>(MovieActions.UPDATE_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.updateMovie(action.payload).pipe(\r\n                map(users => (new MovieActions.UpdateMovieSuccess(action.payload))),\r\n            )\r\n\r\n        )\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Actions, Effect, ofType, createEffect } from '@ngrx/effects';\r\n\r\nimport { ActionType } from '../model/Action'\r\nimport { map, switchMap, mergeMap } from 'rxjs/operators'\r\n\r\nimport * as AuthActions from '../actions/auth.actions';\r\nimport * as MovieActions from '../actions/movie.actions';\r\nimport { DataService } from '../services/data.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class MovieEffects {\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private dataService: DataService\r\n    ) { }\r\n\r\n    @Effect()\r\n    loadMovie$ = this.actions$.pipe(\r\n        ofType(MovieActions.LOAD_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.getMovies().pipe(\r\n                map(movies => (new MovieActions.LoadMovieSucess(movies)))\r\n            )\r\n        )\r\n    )\r\n\r\n    @Effect()\r\n    deleteMovie$ = this.actions$.pipe(\r\n        ofType<ActionType>(MovieActions.DELETE_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.deleteMovie(action.payload).pipe(\r\n                map(users => (new MovieActions.DeleteMovieSuccess(action.payload))),\r\n            )\r\n        )\r\n    )\r\n\r\n    @Effect()\r\n    addMovie$ = this.actions$.pipe(\r\n        ofType<ActionType>(MovieActions.ADD_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.addMovie(action.payload).pipe(\r\n                map(users => (new MovieActions.AddMovieSuccess(action.payload))),\r\n            )\r\n        )\r\n    )\r\n\r\n    @Effect()\r\n    updateMovie$ = this.actions$.pipe(\r\n        ofType<ActionType>(MovieActions.UPDATE_MOVIE),\r\n        mergeMap(\r\n            action => this.dataService.updateMovie(action.payload).pipe(\r\n                map(users => (new MovieActions.UpdateMovieSuccess(action.payload))),\r\n            )\r\n\r\n        )\r\n    )\r\n\r\n}\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "dataService",
                        "type": "DataService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-41ff9adbeb84acc4dd11b4a7f944de60",
            "file": "src/app/services/theme.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getAvailableThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Theme, light, dark } from \"../theme/theme\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class ThemeService {\r\n  private active: Theme = light;\r\n  private availableThemes: Theme[] = [light, dark];\r\n\r\n  getAvailableThemes(): Theme[] {\r\n    return this.availableThemes;\r\n  }\r\n\r\n  getActiveTheme(): Theme {\r\n    return this.active;\r\n  }\r\n\r\n  isDarkTheme(): boolean {\r\n    return this.active.name === dark.name;\r\n  }\r\n\r\n  setDarkTheme(): void {\r\n    this.setActiveTheme(dark);\r\n  }\r\n\r\n  setLightTheme(): void {\r\n    this.setActiveTheme(light);\r\n  }\r\n\r\n  setActiveTheme(theme: Theme): void {\r\n    this.active = theme;\r\n\r\n    Object.keys(this.active.properties).forEach(property => {\r\n      document.documentElement.style.setProperty(\r\n        property,\r\n        this.active.properties[property]\r\n      );\r\n    });\r\n  }\r\n}",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "ActionType",
            "id": "class-ActionType-2269c5af46c42e89b1b766bf112a621f",
            "file": "src/app/model/Action.ts",
            "type": "class",
            "sourceCode": "export class ActionType {\r\n    type: string;\r\n    payload?: any;\r\n}",
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AddMovie",
            "id": "class-AddMovie-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Movie"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Movie",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Movie",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_MOVIE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMovieSuccess",
            "id": "class-AddMovieSuccess-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Movie"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Movie",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Movie",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_MOVIE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Cast",
            "id": "class-Cast-5373d1f70396366d593c8965d58d4e71",
            "file": "src/app/custom-components/Cast.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, css } from 'lit-element';\r\n\r\n// Extend the LitElement base class\r\n// export the class, so it can be imported where it is needed\r\nexport class Cast extends LitElement {\r\n    constructor() {\r\n        super();\r\n        // console.log('called from cast component')\r\n    }\r\n\r\n    show: boolean = false;\r\n\r\n    static get styles() {\r\n        return css`\r\n      .cast { \r\n          cursor: pointer; \r\n        }\r\n    \r\n        .cast-detail{\r\n            height:100%;\r\n\r\n        }\r\n\r\n        .hidden {\r\n  display: none;\r\n  -webkit-transition: display .5s ease;\r\n  \r\n}\r\n\r\n.active {\r\n  -webkit-transition: display .5s ease;\r\n}\r\n\r\n        \r\n    `;\r\n    }\r\n\r\n\r\n    render() {\r\n        return html`\r\n\r\n        <slot></slot> \r\n    <ul>\r\n    <li><slot name=\"name\" > </slot> </li>\r\n        </ul>\r\n\r\n     `\r\n    }\r\n}\r\n\r\n// <div class=\"cast\" @click=\"${() => { this.show = !this.show }}> more < /div>\r\n// ${ this.show ? html`<p>shoow </p>` : html`<p>hide</p>` }\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 5
            },
            "properties": [
                {
                    "name": "show",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteMovie",
            "id": "class-DeleteMovie-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_MOVIE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMovieSuccess",
            "id": "class-DeleteMovieSuccess-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_MOVIE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Load_Users",
            "id": "class-Load_Users-54ff7d0ad8ee0b5dfe66c8edfa17dcb2",
            "file": "src/app/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\n\r\n\r\nexport const LOGIN = '[AUTH] Login';\r\nexport const LOGOUT = '[AUTH] Logout';\r\n\r\nexport const SIGNUP = '[AUTH] Signup'\r\nexport const SIGNUP_SUCCESS = '[AUTH] Signup_Success'\r\n\r\nexport const LOAD_USERS = '[AUTH] Load_Users'\r\nexport const LOAD_USERS_SUCCESS = '[AUTH] Load_Users_Success'\r\nexport class Load_Users implements Action {\r\n    readonly type = LOAD_USERS\r\n    constructor() { }\r\n}\r\n\r\nexport class Load_Users_Success implements Action {\r\n    readonly type = LOAD_USERS_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\nexport class Login implements Action {\r\n    readonly type = LOGIN\r\n    constructor(public payload) { }\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT\r\n    constructor() { }\r\n}\r\n\r\nexport class Signup implements Action {\r\n    readonly type = SIGNUP\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Signup_Success implements Action {\r\n    readonly type = SIGNUP_SUCCESS\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LOAD_USERS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Load_Users_Success",
            "id": "class-Load_Users_Success-54ff7d0ad8ee0b5dfe66c8edfa17dcb2",
            "file": "src/app/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\n\r\n\r\nexport const LOGIN = '[AUTH] Login';\r\nexport const LOGOUT = '[AUTH] Logout';\r\n\r\nexport const SIGNUP = '[AUTH] Signup'\r\nexport const SIGNUP_SUCCESS = '[AUTH] Signup_Success'\r\n\r\nexport const LOAD_USERS = '[AUTH] Load_Users'\r\nexport const LOAD_USERS_SUCCESS = '[AUTH] Load_Users_Success'\r\nexport class Load_Users implements Action {\r\n    readonly type = LOAD_USERS\r\n    constructor() { }\r\n}\r\n\r\nexport class Load_Users_Success implements Action {\r\n    readonly type = LOAD_USERS_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\nexport class Login implements Action {\r\n    readonly type = LOGIN\r\n    constructor(public payload) { }\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT\r\n    constructor() { }\r\n}\r\n\r\nexport class Signup implements Action {\r\n    readonly type = SIGNUP\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Signup_Success implements Action {\r\n    readonly type = SIGNUP_SUCCESS\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LOAD_USERS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMovie",
            "id": "class-LoadMovie-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LOAD_MOVIE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMovieSucess",
            "id": "class-LoadMovieSucess-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LOAD_MOVIE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Login",
            "id": "class-Login-54ff7d0ad8ee0b5dfe66c8edfa17dcb2",
            "file": "src/app/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\n\r\n\r\nexport const LOGIN = '[AUTH] Login';\r\nexport const LOGOUT = '[AUTH] Logout';\r\n\r\nexport const SIGNUP = '[AUTH] Signup'\r\nexport const SIGNUP_SUCCESS = '[AUTH] Signup_Success'\r\n\r\nexport const LOAD_USERS = '[AUTH] Load_Users'\r\nexport const LOAD_USERS_SUCCESS = '[AUTH] Load_Users_Success'\r\nexport class Load_Users implements Action {\r\n    readonly type = LOAD_USERS\r\n    constructor() { }\r\n}\r\n\r\nexport class Load_Users_Success implements Action {\r\n    readonly type = LOAD_USERS_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\nexport class Login implements Action {\r\n    readonly type = LOGIN\r\n    constructor(public payload) { }\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT\r\n    constructor() { }\r\n}\r\n\r\nexport class Signup implements Action {\r\n    readonly type = SIGNUP\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Signup_Success implements Action {\r\n    readonly type = SIGNUP_SUCCESS\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Logout",
            "id": "class-Logout-54ff7d0ad8ee0b5dfe66c8edfa17dcb2",
            "file": "src/app/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\n\r\n\r\nexport const LOGIN = '[AUTH] Login';\r\nexport const LOGOUT = '[AUTH] Logout';\r\n\r\nexport const SIGNUP = '[AUTH] Signup'\r\nexport const SIGNUP_SUCCESS = '[AUTH] Signup_Success'\r\n\r\nexport const LOAD_USERS = '[AUTH] Load_Users'\r\nexport const LOAD_USERS_SUCCESS = '[AUTH] Load_Users_Success'\r\nexport class Load_Users implements Action {\r\n    readonly type = LOAD_USERS\r\n    constructor() { }\r\n}\r\n\r\nexport class Load_Users_Success implements Action {\r\n    readonly type = LOAD_USERS_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\nexport class Login implements Action {\r\n    readonly type = LOGIN\r\n    constructor(public payload) { }\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT\r\n    constructor() { }\r\n}\r\n\r\nexport class Signup implements Action {\r\n    readonly type = SIGNUP\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Signup_Success implements Action {\r\n    readonly type = SIGNUP_SUCCESS\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Movie",
            "id": "class-Movie-9c57e1be8073f1c6a13889cb268783cc",
            "file": "src/app/model/Movie.ts",
            "type": "class",
            "sourceCode": "export class Movie {\r\n    id: number;\r\n    name: string;\r\n    genre: string;\r\n    rating: number;\r\n    cast: Array<string>\r\n}",
            "properties": [
                {
                    "name": "cast",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "genre",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Rating",
            "id": "class-Rating-ef2eafadc7ca629ebdf8b7630163ebee",
            "file": "src/app/custom-components/Rating.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html } from 'lit-element';\r\n\r\n// Extend the LitElement base class\r\n// export the class, so it can be imported where it is needed\r\nexport class Rating extends LitElement {\r\n    constructor() {\r\n        super();\r\n        // console.log('called from rate component')\r\n    }\r\n\r\n    render() {\r\n\r\n        //     let score = this.getAttribute(\"score\")\r\n        //     return html`\r\n        //     <span>\r\n        //        Rating: ${score} / 10\r\n        //     </span>\r\n        // `;\r\n\r\n        return html`\r\n        <span>\r\n           Rating: <slot></slot> / 10\r\n        </span>\r\n        `\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 5
            },
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Signup",
            "id": "class-Signup-54ff7d0ad8ee0b5dfe66c8edfa17dcb2",
            "file": "src/app/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\n\r\n\r\nexport const LOGIN = '[AUTH] Login';\r\nexport const LOGOUT = '[AUTH] Logout';\r\n\r\nexport const SIGNUP = '[AUTH] Signup'\r\nexport const SIGNUP_SUCCESS = '[AUTH] Signup_Success'\r\n\r\nexport const LOAD_USERS = '[AUTH] Load_Users'\r\nexport const LOAD_USERS_SUCCESS = '[AUTH] Load_Users_Success'\r\nexport class Load_Users implements Action {\r\n    readonly type = LOAD_USERS\r\n    constructor() { }\r\n}\r\n\r\nexport class Load_Users_Success implements Action {\r\n    readonly type = LOAD_USERS_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\nexport class Login implements Action {\r\n    readonly type = LOGIN\r\n    constructor(public payload) { }\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT\r\n    constructor() { }\r\n}\r\n\r\nexport class Signup implements Action {\r\n    readonly type = SIGNUP\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Signup_Success implements Action {\r\n    readonly type = SIGNUP_SUCCESS\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Signup_Success",
            "id": "class-Signup_Success-54ff7d0ad8ee0b5dfe66c8edfa17dcb2",
            "file": "src/app/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\n\r\n\r\nexport const LOGIN = '[AUTH] Login';\r\nexport const LOGOUT = '[AUTH] Logout';\r\n\r\nexport const SIGNUP = '[AUTH] Signup'\r\nexport const SIGNUP_SUCCESS = '[AUTH] Signup_Success'\r\n\r\nexport const LOAD_USERS = '[AUTH] Load_Users'\r\nexport const LOAD_USERS_SUCCESS = '[AUTH] Load_Users_Success'\r\nexport class Load_Users implements Action {\r\n    readonly type = LOAD_USERS\r\n    constructor() { }\r\n}\r\n\r\nexport class Load_Users_Success implements Action {\r\n    readonly type = LOAD_USERS_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\nexport class Login implements Action {\r\n    readonly type = LOGIN\r\n    constructor(public payload) { }\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT\r\n    constructor() { }\r\n}\r\n\r\nexport class Signup implements Action {\r\n    readonly type = SIGNUP\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Signup_Success implements Action {\r\n    readonly type = SIGNUP_SUCCESS\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type Actions = Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMovie",
            "id": "class-UpdateMovie-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Movie"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Movie",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Movie",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_MOVIE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMovieSuccess",
            "id": "class-UpdateMovieSuccess-7b339179cf81be931502a10b72f823a6",
            "file": "src/app/actions/movie.actions.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Action } from '@ngrx/store'\r\nimport { Movie } from '../model/Movie'\r\n\r\nexport const ADD_MOVIE = '[MOVIE] Add';\r\nexport const ADD_MOVIE_SUCCESS = '[MOVIE] Add_Success'\r\n\r\nexport const DELETE_MOVIE = '[MOVIE] Delete';\r\nexport const DELETE_MOVIE_SUCCESS = '[MOVIE] Delete_Success';\r\n\r\nexport const UPDATE_MOVIE = '[MOVIE] Update';\r\nexport const UPDATE_MOVIE_SUCCESS = '[MOVIE] Update_Success'\r\n\r\nexport const LOAD_MOVIE = '[MOVIE] Load'\r\nexport const LOAD_MOVIE_SUCCESS = '[MOVIE] Load_Success'\r\n\r\nexport class LoadMovie implements Action {\r\n    readonly type = LOAD_MOVIE\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadMovieSucess implements Action {\r\n    readonly type = LOAD_MOVIE_SUCCESS\r\n    constructor(public payload) { }\r\n}\r\n\r\nexport class AddMovie implements Action {\r\n    readonly type = ADD_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class AddMovieSuccess implements Action {\r\n    readonly type = ADD_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class DeleteMovie implements Action {\r\n    readonly type = DELETE_MOVIE\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class DeleteMovieSuccess implements Action {\r\n    readonly type = DELETE_MOVIE_SUCCESS\r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class UpdateMovie implements Action {\r\n    readonly type = UPDATE_MOVIE\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport class UpdateMovieSuccess implements Action {\r\n    readonly type = UPDATE_MOVIE_SUCCESS\r\n    constructor(public payload: Movie) { }\r\n}\r\n\r\nexport type Actions = AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Movie"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Movie",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Movie",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_MOVIE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-f4028b3b56a1e4acab4c104ac1dcc2df",
            "file": "src/app/model/User.ts",
            "type": "class",
            "sourceCode": "export class User {\r\n    id: number;\r\n    username: string;\r\n    password: string;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddComponent",
            "id": "component-AddComponent-085364aab579831b5c28c439f54c8565",
            "file": "src/app/components/movie/add/add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add",
            "styleUrls": [
                "./add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "joinedCast",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "Movie",
                    "defaultValue": "{} as Movie",
                    "type": "Movie",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addMovie",
                    "args": [
                        {
                            "name": "movieObj",
                            "type": "Movie"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "movieObj",
                            "type": "Movie",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../app.state'\r\nimport { Movie } from '../../../model/Movie'\r\nimport { Observable } from 'rxjs';\r\n\r\nimport * as MovieActions from '../../../actions/movie.actions'\r\n@Component({\r\n  selector: 'app-add',\r\n  templateUrl: './add.component.html',\r\n  styleUrls: ['./add.component.scss']\r\n})\r\nexport class AddComponent implements OnInit {\r\n\r\n  constructor(private store: Store<AppState>, private router: Router) { }\r\n\r\n  Movie: Movie = {} as Movie;\r\n  joinedCast: string = \"\";\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit() {\r\n    // this.Movie.id = Math.floor(Math.random() * 100)\r\n    this.addMovie(this.Movie)\r\n  }\r\n\r\n  addMovie(movieObj: Movie) {\r\n    this.Movie.rating = parseFloat(this.Movie.rating.toString())\r\n    this.Movie.cast = this.joinedCast.split(\";\").filter((x) => x.trim() != \"\")\r\n    this.store.dispatch(new MovieActions.AddMovie(movieObj));\r\n    this.router.navigate(['home'])\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\r\n\r\n    <form (ngSubmit)=\"onSubmit()\" ngNativeValidate>\r\n        <div class=\"info\">\r\n            <h2>Add Movie details</h2>\r\n        </div>\r\n        <div class=\"info\">\r\n            <label htmlFor=\"name\">\r\n                Name\r\n            </label>\r\n            <input type=\"text\" name=\"name\" id=\"\" [(ngModel)]=\"Movie.name\" required>\r\n        </div>\r\n\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"genre\">\r\n                Genre\r\n            </label>\r\n            <input type=\"text\" name=\"genre\" id=\"\" [(ngModel)]=\"Movie.genre\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"rating\">\r\n                Rating\r\n            </label>\r\n            <input type=\"number\" name=\"rating\" id=\"\" min=\"1\" max=\"10\" step=\"0.1\" [(ngModel)]=\"Movie.rating\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"cast\">\r\n                Cast\r\n            </label>\r\n            <input type=\"text\" name=\"cast\" id=\"\" [(ngModel)]=\"joinedCast\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <input type=\"submit\" value=\"Add Movie\" class=\"button addMovie\">\r\n\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-194c0adc315a44b0c74e4ed631f7278c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Movie } from './model/Movie';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-29bd1e3e8a9cb9f679ea08128beb2564-1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faDollarSign",
                    "defaultValue": "faDollarSign",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "faEdit",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "faLightbulb",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "faTrash",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isDark",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isLoggedIn",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "themeService",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "Logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "setLightbulb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../app.state'\r\nimport { Observable } from 'rxjs';\r\n\r\nimport * as AuthActions from '../../actions/auth.actions'\r\nimport {\r\n  faLightbulb as faSolidLightbulb,\r\n  faDollarSign,\r\n  IconDefinition,\r\n  faEdit as faSolidEdit,\r\n  faTrash as faSolidTrash\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n  faLightbulb as faRegularLightbulb,\r\n  faEdit as faRegularEdit,\r\n  faTrash as faRegularTrash\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { ThemeService } from '../../services/theme.service'\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  isLoggedIn: Observable<boolean>;\r\n  subscription;\r\n\r\n  faEdit: IconDefinition;\r\n  faLightbulb: IconDefinition;\r\n  faTrash: IconDefinition;\r\n  faDollarSign = faDollarSign;\r\n  isDark: boolean\r\n\r\n  constructor(public store: Store<AppState>, public themeService: ThemeService) {\r\n    this.subscription = store.select(\"auth\").subscribe((data) => {\r\n      this.isLoggedIn = data[\"isLoggedIn\"]\r\n    });\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(new AuthActions.Load_Users())\r\n    this.setLightbulb();\r\n  }\r\n\r\n  // ngOnChanges() {\r\n  //   this.isDark = this.themeService.isDarkTheme()\r\n\r\n  // }\r\n\r\n  Logout() {\r\n    this.store.dispatch(new AuthActions.Logout())\r\n    this.subscription = this.store.select(\"auth\").subscribe((data) => {\r\n      this.isLoggedIn = data[\"isLoggedIn\"]\r\n    });\r\n  }\r\n\r\n\r\n\r\n  toggleTheme() {\r\n    if (this.themeService.isDarkTheme()) {\r\n      this.themeService.setLightTheme();\r\n    } else {\r\n      this.themeService.setDarkTheme();\r\n    }\r\n\r\n    this.setLightbulb();\r\n  }\r\n\r\n  setLightbulb() {\r\n    if (this.themeService.isDarkTheme()) {\r\n      this.faEdit = faRegularEdit;\r\n      this.faTrash = faRegularTrash;\r\n\r\n      this.faLightbulb = faRegularLightbulb;\r\n    } else {\r\n      this.faEdit = faSolidEdit;\r\n      this.faTrash = faSolidTrash;\r\n      this.faLightbulb = faSolidLightbulb;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //Called once, before the instance is destroyed.\r\n    //Add 'implements OnDestroy' to the class.\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button{\r\n    &.logout,&.login{\r\n      float: right;\r\n}\r\n}\r\n\r\n.theme{\r\n  background: var(--theme);\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div *ngIf=\"false\">\r\n    Is User Logged in ..? {{isLoggedIn }}\r\n</div>\r\n\r\n<div>\r\n    <ng-container *ngIf=\"isLoggedIn; else elseTemplate\">\r\n        <button class=\"logout button\" (click)=\"Logout()\">\r\n            Logout\r\n        </button>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <button class=\"login button\" routerLink=\"/login\">\r\n            Login\r\n        </button>\r\n    </ng-template>\r\n\r\n    <button routerLink=\"/addmovie\" class=\"button addMovie\"\r\n        [ngStyle]=\"{'visibility': isLoggedIn ? 'visible' : 'hidden' }\">\r\n        Add Movie\r\n    </button>\r\n\r\n    <!-- <nav>\r\n        <fa-icon [icon]=\"faLightbulb\" (click)=\"toggleTheme()\"></fa-icon>\r\n    </nav> -->\r\n\r\n    <button (click)=\"toggleTheme()\" class=\"button theme ml-10\">\r\n        <ng-container *ngIf=\"this.themeService.isDarkTheme(); else darkTemplate\">\r\n            Light Theme\r\n        </ng-container>\r\n        <ng-template #darkTemplate>\r\n            Dark Theme\r\n        </ng-template>\r\n    </button>\r\n\r\n\r\n\r\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-56fc62082e04324f0ca02348d9343623",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <app-header></app-header>\r\n    <div class=\"flex-center\">\r\n        <h2>Movies List</h2>\r\n    </div>\r\n    <movie-list></movie-list>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-45a003a81341f996aa89ff065fe39d6f",
            "file": "src/app/components/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "User",
                    "defaultValue": "{} as User",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "Login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../app.state'\r\nimport { Router } from '@angular/router'\r\n\r\nimport { Observable } from 'rxjs';\r\nimport * as AuthActions from '../../../actions/auth.actions'\r\nimport { User } from 'src/app/model/User';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  isLoggedIn;\r\n  subscription\r\n  constructor(public store: Store<AppState>, public router: Router) {\r\n    this.isLoggedIn = store.select(\"auth\");\r\n  }\r\n\r\n  User: User = {} as User;\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  Login() {\r\n    this.store.dispatch(new AuthActions.Login(this.User))\r\n\r\n    this.subscription = this.store.select(\"auth\").subscribe((data) => {\r\n      this.isLoggedIn = data[\"isLoggedIn\"]\r\n    });\r\n\r\n    this.isLoggedIn == true ? this.router.navigate(['/home']) : alert(\"invalid creds\");\r\n  }\r\n\r\n  // ngOnDestroy() {\r\n  //   this.subscription.unsubscribe()\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\r\n    <form (ngSubmit)=\"Login()\" ngNativeValidate>\r\n        <div class=\"info\">\r\n            <h2>Login Form</h2>\r\n\r\n        </div>\r\n        <div class=\"info\">\r\n            <label htmlFor=\"username\">\r\n                Username\r\n            </label>\r\n            <input type=\"text\" name=\"username\" id=\"\" [(ngModel)]=\"User.username\" required>\r\n        </div>\r\n\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"password\">\r\n                Password\r\n            </label>\r\n            <input type=\"password\" name=\"password\" id=\"\" required [(ngModel)]=\"User.password\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <input type=\"submit\" value=\"Login\" class=\" login button\">\r\n            <input type=\"submit\" value=\"Sign Up\" class=\" signup button ml-10\" [routerLink]=\"['/signup']\">\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "MovieCardComponent",
            "id": "component-MovieCardComponent-eb823616d18a9f4d9759fa8568639c28",
            "file": "src/app/components/movie/movie-card/movie-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "movie-card",
            "styleUrls": [
                "./movie-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./movie-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "line": 11,
                    "description": "<p>Unique id of movie</p>\n",
                    "type": "number"
                },
                {
                    "name": "name",
                    "line": 11,
                    "description": "<p>Name of movie</p>\n",
                    "type": "string"
                },
                {
                    "name": "genre",
                    "line": 11,
                    "description": "<p>Genre of movie</p>\n",
                    "type": "string"
                },
                {
                    "name": "rating",
                    "line": 11,
                    "description": "<p>Rating of movie</p>\n",
                    "type": "number"
                },
                {
                    "name": "cast",
                    "line": 11,
                    "description": "<p>Cast of movie</p>\n",
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Movie } from '../../../model/Movie';\r\n\r\n@Component({\r\n  selector: 'movie-card',\r\n  templateUrl: './movie-card.component.html',\r\n  styleUrls: ['./movie-card.component.scss']\r\n})\r\nexport class MovieCardComponent implements OnInit {\r\n\r\n  @Input() movie: Movie;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".info{\r\n    line-height: 1;\r\n}",
                    "styleUrl": "./movie-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n    <div class=\"info\">\r\n        Name: {{this.movie.name}}\r\n    </div>\r\n\r\n    <div class=\"info\">\r\n        Genre: {{this.movie.genre}}\r\n    </div>\r\n\r\n    <div class=\"info\">\r\n        <movie-rating>{{this.movie.rating}}</movie-rating>\r\n    </div>\r\n\r\n    <div class=\"info\">\r\n\r\n        <movie-cast>\r\n            Cast:\r\n            <li slot=\"name\" *ngFor=\"let member of movie.cast\">{{member}}</li>\r\n        </movie-cast>\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "MovieListComponent",
            "id": "component-MovieListComponent-220ed1ef146d1b49b469a8292868d1b7",
            "file": "src/app/components/movie/movie-list/movie-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "movie-list",
            "styleUrls": [
                "./movie-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./movie-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faDollarSign",
                    "defaultValue": "faDollarSign",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "faEdit",
                    "defaultValue": "faEdit",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "faLightbulb",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isLoggedIn",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "movielist",
                    "type": "Observable<Movie[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "themeService",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteMovie",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "setLightbulb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "updateMovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": "Movie"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "Movie",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../../../services/data.service';\r\nimport { Router } from '@angular/router'\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../app.state'\r\nimport { Movie } from '../../../model/Movie'\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nimport * as MovieActions from '../../../actions/movie.actions'\r\n\r\n\r\nimport {\r\n  faLightbulb as faSolidLightbulb,\r\n  faDollarSign,\r\n  IconDefinition,\r\n  faEdit as faSolidEdit,\r\n  faTrash as faSolidTrash\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n  faLightbulb as faRegularLightbulb,\r\n  faEdit as faRegularEdit,\r\n  faTrash as faRegularTrash\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrash, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { ThemeService } from 'src/app/services/theme.service';\r\n\r\n@Component({\r\n  selector: 'movie-list',\r\n  templateUrl: './movie-list.component.html',\r\n  styleUrls: ['./movie-list.component.scss']\r\n})\r\nexport class MovieListComponent implements OnInit {\r\n\r\n  // movielist: Array<Movie>;\r\n  movielist: Observable<Movie[]>;\r\n  isLoggedIn: Observable<any>;\r\n\r\n  faEdit: IconDefinition = faEdit;\r\n  faLightbulb: IconDefinition;\r\n  faTrash: IconDefinition = faTrash;\r\n  faDollarSign = faDollarSign;\r\n\r\n  subscription\r\n  constructor(\r\n    private data: DataService,\r\n    private store: Store<AppState>,\r\n    private router: Router,\r\n    public themeService: ThemeService\r\n  ) {\r\n    this.movielist = store.select('movie');\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.store.select(\"auth\").subscribe((data) => {\r\n      this.isLoggedIn = data[\"isLoggedIn\"]\r\n    });\r\n    this.store.dispatch(new MovieActions.LoadMovie())\r\n  }\r\n\r\n  deleteMovie(id: number) {\r\n    this.store.dispatch(new MovieActions.DeleteMovie(id))\r\n  }\r\n\r\n  updateMovie(movie: Movie) {\r\n    this.router.navigate(['/updatemovie'], { state: movie })\r\n  }\r\n\r\n\r\n  // toggleTheme() {\r\n  //   if (this.themeService.isDarkTheme()) {\r\n  //     this.themeService.setLightTheme();\r\n  //   } else {\r\n  //     this.themeService.setDarkTheme();\r\n  //   }\r\n\r\n  //   this.setLightbulb();\r\n  // }\r\n\r\n  ngOnChanges(): void {\r\n    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\r\n    //Add '${implements OnChanges}' to the class.\r\n    this.setLightbulb()\r\n  }\r\n\r\n  setLightbulb() {\r\n    if (this.themeService.isDarkTheme()) {\r\n      this.faEdit = faRegularEdit;\r\n      this.faTrash = faRegularTrash;\r\n      this.faLightbulb = faRegularLightbulb;\r\n    } else {\r\n      this.faEdit = faSolidEdit;\r\n      this.faTrash = faSolidTrash;\r\n      this.faLightbulb = faSolidLightbulb;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //Called once, before the instance is destroyed.\r\n    //Add 'implements OnDestroy' to the class.\r\n    this.subscription.unsubscribe()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card{\r\n    margin: 10px;\r\n    padding: 10px;\r\n    background-color: var(--card-background);\r\n    color:var(--text-color);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    img{\r\n        height: 20px;\r\n        width: 20px;\r\n        cursor: pointer;\r\n    }\r\n    span{\r\n        cursor: pointer;\r\n    }\r\n}\r\n\r\n.list{\r\n    background-color: var( --list-background);\r\n    padding:10px;\r\n    height: calc(100vh - 164px);\r\n    overflow-y: scroll;\r\n\r\n    .no-movie{\r\n        justify-content: center;\r\n    }\r\n}",
                    "styleUrl": "./movie-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DataService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list\">\r\n    <ng-container *ngIf=\"(movielist | async).length>0; else elseTemplate\">\r\n        <div *ngFor=\"let movie of movielist | async\" class=\"card\">\r\n            <div>\r\n                <movie-card [movie]=\"movie\"></movie-card>\r\n            </div>\r\n            <div *ngIf=\"this.isLoggedIn\">\r\n                <!-- <img src=\"assets/image/update.png\" (click)=updateMovie(movie)> -->\r\n\r\n                <span (click)=updateMovie(movie)>\r\n                    <fa-icon [icon]=\"faEdit\"></fa-icon>\r\n                </span>\r\n\r\n                <!-- <img src=\"assets/image/delete.png\" (click)=\"deleteMovie(movie.id)\" class=\"ml-10\"> -->\r\n\r\n                <span class=\"ml-10\" (click)=\"deleteMovie(movie.id)\">\r\n                    <fa-icon [icon]=\"faTrash\"></fa-icon>\r\n\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"card no-movie\">\r\n            No movies to show\r\n        </div>\r\n    </ng-template>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-caf3f2fce2bf7356cf7ccd76b8a88482",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Learn Storybook\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          docs\r\n        </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-6934169020c439b2d885b72cdaeabb19",
            "file": "src/app/components/auth/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [
                "./signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "User",
                    "defaultValue": "{} as User",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "SignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../app.state'\r\nimport { Observable } from 'rxjs';\r\nimport * as AuthActions from '../../../actions/auth.actions'\r\nimport { User } from 'src/app/model/User';\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n  constructor(public store: Store<AppState>, public router: Router) {\r\n\r\n  }\r\n\r\n  User: User = {} as User;\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  SignUp() {\r\n\r\n    // this.User.id = Math.floor(Math.random() * 100);\r\n    this.store.dispatch(new AuthActions.Signup(this.User))\r\n    this.router.navigate(['/login']);\r\n\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\r\n\r\n    <form (ngSubmit)=\"SignUp()\" ngNativeValidate>\r\n        <div class=\"info\">\r\n            <h2>Sign Up Form</h2>\r\n        </div>\r\n        <div class=\"info\">\r\n            <label htmlFor=\"username\">\r\n                Username\r\n            </label>\r\n            <input type=\"text\" name=\"username\" id=\"\" [(ngModel)]=\"User.username\" required>\r\n        </div>\r\n\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"password\">\r\n                Password\r\n            </label>\r\n            <input type=\"password\" name=\"password\" id=\"\" required [(ngModel)]=\"User.password\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <input type=\"submit\" value=\"Sign Up\" class=\"signup button\">\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "UpdateComponent",
            "id": "component-UpdateComponent-516a04c0c153d0fd042d6b67e79c5cfa",
            "file": "src/app/components/movie/update/update.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update",
            "styleUrls": [
                "./update.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./update.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "joinedCast",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "Movie",
                    "defaultValue": "{} as Movie",
                    "type": "Movie",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router'\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../app.state'\r\nimport { Movie } from '../../../model/Movie'\r\nimport { Observable } from 'rxjs';\r\nimport * as MovieActions from '../../../actions/movie.actions'\r\n@Component({\r\n  selector: 'app-update',\r\n  templateUrl: './update.component.html',\r\n  styleUrls: ['./update.component.scss']\r\n})\r\nexport class UpdateComponent implements OnInit {\r\n\r\n  constructor(private store: Store<AppState>, private router: Router) { }\r\n\r\n  joinedCast: string = \"\";\r\n\r\n  Movie: Movie = {} as Movie;\r\n  ngOnInit(): void {\r\n    console.log('Movie name is ', window.history.state.name)\r\n    this.Movie = window.history.state\r\n    this.joinedCast = this.Movie.cast.join(\";\")\r\n  }\r\n\r\n  onSubmit() {\r\n    this.Movie.rating = parseFloat(this.Movie.rating.toString())\r\n    this.Movie.cast = this.joinedCast.split(\";\").filter((x) => x.trim() != \"\")\r\n    this.store.dispatch(new MovieActions.UpdateMovie(this.Movie));\r\n    this.router.navigate(['home'])\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./update.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <form (ngSubmit)=\"onSubmit()\" ngNativeValidate>\r\n        <div class=\"info\">\r\n            <h2>Update Movie details</h2>\r\n        </div>\r\n        <div class=\"info\">\r\n            <label htmlFor=\"name\">\r\n                Name\r\n            </label>\r\n            <input type=\"text\" name=\"name\" id=\"\" [(ngModel)]=\"Movie.name\" required>\r\n        </div>\r\n        <div class=\"info\">\r\n            <label htmlFor=\"genre\">\r\n                Genre\r\n            </label>\r\n            <input type=\"text\" name=\"genre\" id=\"\" [(ngModel)]=\"Movie.genre\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"rating\">\r\n                Rating\r\n            </label>\r\n            <input type=\"number\" name=\"rating\" id=\"\" min=\"1\" max=\"10\" step=\"0.1\" [(ngModel)]=\"Movie.rating\" required>\r\n        </div>\r\n\r\n        <div class=\"info\">\r\n            <label htmlFor=\"cast\">\r\n                Cast\r\n            </label>\r\n            <input type=\"text\" name=\"cast\" id=\"\" [(ngModel)]=\"joinedCast\" required>\r\n        </div>\r\n        <div class=\"info\">\r\n            <input type=\"submit\" value=\"Update Movie\" class=\"button updateMovie\">\r\n\r\n        </div>\r\n    </form>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MovieCardComponent"
                        },
                        {
                            "name": "MovieListComponent"
                        },
                        {
                            "name": "SignupComponent"
                        },
                        {
                            "name": "UpdateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_MOVIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Add'"
            },
            {
                "name": "ADD_MOVIE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Add_Success'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: \"dark\",\r\n    properties: {\r\n        \"--foreground-default\": \"#5C7D99\",\r\n        \"--foreground-secondary\": \"#A3B9CC\",\r\n        \"--foreground-tertiary\": \"#F4FAFF\",\r\n        \"--foreground-quaternary\": \"#E5E5E5\",\r\n        \"--foreground-light\": \"#FFFFFF\",\r\n\r\n        \"--background-default\": \"#797C80\",\r\n        \"--background-secondary\": \"#41474D\",\r\n        \"--background-tertiary\": \"#08090A\",\r\n        \"--background-light\": \"#41474D\",\r\n\r\n        \"--primary-default\": \"#5DFDCB\",\r\n        \"--primary-dark\": \"#24B286\",\r\n        \"--primary-light\": \"#B2FFE7\",\r\n\r\n        \"--error-default\": \"#EF3E36\",\r\n        \"--error-dark\": \"#800600\",\r\n        \"--error-light\": \"#FFCECC\",\r\n\r\n        \"--background-tertiary-shadow\": \"0 1px 3px 0 rgba(8, 9, 10, 0.5)\",\r\n\r\n\r\n        \"--text-color\": \"white\",\r\n        \"--body-background\": \"#262626\",\r\n        \"--signup\": \"#3277B3\",\r\n        \"--list-background\": \"#363C49\",\r\n        \"--card-background\": \"#262626\"\r\n    }\r\n}"
            },
            {
                "name": "DELETE_MOVIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Delete'"
            },
            {
                "name": "DELETE_MOVIE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Delete_Success'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/auth.reducer.ts",
                "type": "object",
                "defaultValue": "{\r\n    isLoggedIn: false,\r\n    \"users\": [],\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/movie.reducer.ts",
                "type": "Array<Movie>",
                "defaultValue": "[]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: \"light\",\r\n    properties: {\r\n        \"--foreground-default\": \"#08090A\",\r\n        \"--foreground-secondary\": \"#41474D\",\r\n        \"--foreground-tertiary\": \"#797C80\",\r\n        \"--foreground-quaternary\": \"#F4FAFF\",\r\n        \"--foreground-light\": \"#41474D\",\r\n\r\n        \"--background-default\": \"#F4FAFF\",\r\n        \"--background-secondary\": \"#A3B9CC\",\r\n        \"--background-tertiary\": \"#5C7D99\",\r\n        \"--background-light\": \"#FFFFFF\",\r\n\r\n        \"--primary-default\": \"#5DFDCB\",\r\n        \"--primary-dark\": \"#24B286\",\r\n        \"--primary-light\": \"#B2FFE7\",\r\n\r\n        \"--error-default\": \"#EF3E36\",\r\n        \"--error-dark\": \"#800600\",\r\n        \"--error-light\": \"#FFCECC\",\r\n        \"--background-tertiary-shadow\": \"0 1px 3px 0 rgba(92, 125, 153, 0.5)\",\r\n\r\n\r\n        \"--text-color\": \"black\",\r\n        \"--body-background\": \"#FFFFFF\",\r\n        \"--signup\": \"#3277B3\",\r\n        \"--list-background\": \"#E2E4E9\",\r\n        \"--card-background\": \"#FFFFFF\",\r\n        \"--theme\": \"#3277B3\"\r\n    }\r\n}"
            },
            {
                "name": "LOAD_MOVIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Load'"
            },
            {
                "name": "LOAD_MOVIE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Load_Success'"
            },
            {
                "name": "LOAD_USERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[AUTH] Load_Users'"
            },
            {
                "name": "LOAD_USERS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[AUTH] Load_Users_Success'"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LOGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[AUTH] Login'"
            },
            {
                "name": "LOGOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[AUTH] Logout'"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/movie-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SIGNUP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[AUTH] Signup'"
            },
            {
                "name": "SIGNUP_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[AUTH] Signup_Success'"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/movie-card.stories.ts",
                "type": "Story<MovieCardComponent>",
                "defaultValue": "(args: MovieCardComponent) => ({\r\n    component: MovieCardComponent,\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_MOVIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Update'"
            },
            {
                "name": "UPDATE_MOVIE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/movie.actions.ts",
                "type": "string",
                "defaultValue": "'[MOVIE] Update_Success'"
            }
        ],
        "functions": [
            {
                "name": "authreducer",
                "file": "src/app/reducers/auth.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/reducers/movie.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
                "file": "src/app/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
                "file": "src/app/actions/movie.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/actions/movie.actions.ts": [
                {
                    "name": "ADD_MOVIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Add'"
                },
                {
                    "name": "ADD_MOVIE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Add_Success'"
                },
                {
                    "name": "DELETE_MOVIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Delete'"
                },
                {
                    "name": "DELETE_MOVIE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Delete_Success'"
                },
                {
                    "name": "LOAD_MOVIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Load'"
                },
                {
                    "name": "LOAD_MOVIE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Load_Success'"
                },
                {
                    "name": "UPDATE_MOVIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Update'"
                },
                {
                    "name": "UPDATE_MOVIE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/movie.actions.ts",
                    "type": "string",
                    "defaultValue": "'[MOVIE] Update_Success'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/theme/theme.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: \"dark\",\r\n    properties: {\r\n        \"--foreground-default\": \"#5C7D99\",\r\n        \"--foreground-secondary\": \"#A3B9CC\",\r\n        \"--foreground-tertiary\": \"#F4FAFF\",\r\n        \"--foreground-quaternary\": \"#E5E5E5\",\r\n        \"--foreground-light\": \"#FFFFFF\",\r\n\r\n        \"--background-default\": \"#797C80\",\r\n        \"--background-secondary\": \"#41474D\",\r\n        \"--background-tertiary\": \"#08090A\",\r\n        \"--background-light\": \"#41474D\",\r\n\r\n        \"--primary-default\": \"#5DFDCB\",\r\n        \"--primary-dark\": \"#24B286\",\r\n        \"--primary-light\": \"#B2FFE7\",\r\n\r\n        \"--error-default\": \"#EF3E36\",\r\n        \"--error-dark\": \"#800600\",\r\n        \"--error-light\": \"#FFCECC\",\r\n\r\n        \"--background-tertiary-shadow\": \"0 1px 3px 0 rgba(8, 9, 10, 0.5)\",\r\n\r\n\r\n        \"--text-color\": \"white\",\r\n        \"--body-background\": \"#262626\",\r\n        \"--signup\": \"#3277B3\",\r\n        \"--list-background\": \"#363C49\",\r\n        \"--card-background\": \"#262626\"\r\n    }\r\n}"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: \"light\",\r\n    properties: {\r\n        \"--foreground-default\": \"#08090A\",\r\n        \"--foreground-secondary\": \"#41474D\",\r\n        \"--foreground-tertiary\": \"#797C80\",\r\n        \"--foreground-quaternary\": \"#F4FAFF\",\r\n        \"--foreground-light\": \"#41474D\",\r\n\r\n        \"--background-default\": \"#F4FAFF\",\r\n        \"--background-secondary\": \"#A3B9CC\",\r\n        \"--background-tertiary\": \"#5C7D99\",\r\n        \"--background-light\": \"#FFFFFF\",\r\n\r\n        \"--primary-default\": \"#5DFDCB\",\r\n        \"--primary-dark\": \"#24B286\",\r\n        \"--primary-light\": \"#B2FFE7\",\r\n\r\n        \"--error-default\": \"#EF3E36\",\r\n        \"--error-dark\": \"#800600\",\r\n        \"--error-light\": \"#FFCECC\",\r\n        \"--background-tertiary-shadow\": \"0 1px 3px 0 rgba(92, 125, 153, 0.5)\",\r\n\r\n\r\n        \"--text-color\": \"black\",\r\n        \"--body-background\": \"#FFFFFF\",\r\n        \"--signup\": \"#3277B3\",\r\n        \"--list-background\": \"#E2E4E9\",\r\n        \"--card-background\": \"#FFFFFF\",\r\n        \"--theme\": \"#3277B3\"\r\n    }\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/app/reducers/auth.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/auth.reducer.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    isLoggedIn: false,\r\n    \"users\": [],\r\n}"
                }
            ],
            "src/app/reducers/movie.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/movie.reducer.ts",
                    "type": "Array<Movie>",
                    "defaultValue": "[]"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/actions/auth.actions.ts": [
                {
                    "name": "LOAD_USERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[AUTH] Load_Users'"
                },
                {
                    "name": "LOAD_USERS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[AUTH] Load_Users_Success'"
                },
                {
                    "name": "LOGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[AUTH] Login'"
                },
                {
                    "name": "LOGOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[AUTH] Logout'"
                },
                {
                    "name": "SIGNUP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[AUTH] Signup'"
                },
                {
                    "name": "SIGNUP_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[AUTH] Signup_Success'"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/movie-card.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/movie-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/movie-card.stories.ts",
                    "type": "Story<MovieCardComponent>",
                    "defaultValue": "(args: MovieCardComponent) => ({\r\n    component: MovieCardComponent,\r\n    props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/reducers/auth.reducer.ts": [
                {
                    "name": "authreducer",
                    "file": "src/app/reducers/auth.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/reducers/movie.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/reducers/movie.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/actions/auth.actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Login | Logout | Signup_Success | Signup | Load_Users | Load_Users_Success",
                    "file": "src/app/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/actions/movie.actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddMovie | AddMovieSuccess | DeleteMovie | DeleteMovieSuccess | UpdateMovie | UpdateMovieSuccess | LoadMovie | LoadMovieSucess",
                    "file": "src/app/actions/movie.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "addmovie",
                        "component": "AddComponent"
                    },
                    {
                        "path": "updatemovie",
                        "component": "UpdateComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "signup",
                        "component": "SignupComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Load_Users",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Load_Users_Success",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Signup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Signup_Success",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_USERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_USERS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGOUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMovie",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMovieSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMovie",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMovieSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMovie",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMovieSucess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMovie",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMovieSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_MOVIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_MOVIE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_MOVIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_MOVIE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_MOVIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_MOVIE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_MOVIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/movie.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_MOVIE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/auth/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/movie/add/add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/movie/movie-card/movie-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/movie/movie-list/movie-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/movie/update/update.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/custom-components/Cast.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Cast",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/custom-components/Rating.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Rating",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/movie.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MovieEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/Action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ActionType",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/Movie.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Movie",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/User.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/auth.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "authreducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/movie.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/movie.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/movie-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/movie-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}